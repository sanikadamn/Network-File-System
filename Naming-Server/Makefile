# Link to ChatGPT conversation: https://chat.openai.com/share/78e4f913-4495-4d33-a534-624d1e3d0324

# AI-Generated Makefile
# This Makefile was generated by OpenAI's language model based on the GPT-3.5 architecture.

# Prompt:
# Create a new Makefile. This should have the notice that it was AI generated at the top,
# along with the entire prompt provided until now and also what follows.
# The Makefile is used to compile multiple C files into a single executable ss.
# The user should be able to specify what files to include for compilation.

# Extended Prompt:
# Modify the Makefile to include the files for compilation as a part of the Makefile.
# Also include dependency generation on headers.

CC = gcc
CFLAGS = -Wall -g -lpthread
DEPS = $(wildcard *.h)

SRCS = \
	ns.c \
	../common/thread_pool.c \
	client_operations.c \
	connect_storage_server.c \
	../common/packets.c \
	../common/buffer.c \
	# pq.c \

OBJS = $(SRCS:.c=.o)

# Executeable name
EXEC = ns

# Default target to build the executable
all: $(EXEC)

# Turns on different sanitizers.
# tsan: turns on Thread Sanitizer, Undefined Behaviour Sanitizer (ubsan)
# asan: turns on Address Sanitizer, Undeined Behvaiour Sanitizer (ubsan)
asan: CFLAGS  += -fsanitize=address -fno-common -DASAN
asan: LDFLAGS += -fsanitize=address -fno-common -DASAN
tsan: CFLAGS  += -fsanitize=thread -DTSAN
tsan: LDFLAGS += -fsanitize=thread -DTSAN
tsan asan: CFLAGS  += -fsanitize=undefined -DUBSAN
tsan asan: LDFLAGS += -fsanitize=undefined -DUBSAN
tsan asan: debug

# Turns on debug
debug: CFLAGS += -DDEBUG_ON -g
debug: all

# Compile the source files into object files and generate dependencies on header files
%.o: %.c
	$(CC) $(CFLAGS) -MMD -MP -c $< -o $@

# Include generated dependencies
-include $(OBJS:.o=.d)

# Link the object files into the executable
$(EXEC): $(OBJS)
	$(CC) $(CFLAGS) $^ -o $@

# Clean up generated files
clean:
	rm -f *.o *.d $(EXEC)

tidy:
	clang-tidy -header-filter=.* $(SRCS)

format:
	clang-format -i $(SRCS)
